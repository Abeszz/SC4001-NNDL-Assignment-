{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### E. Clothing Classification\n",
    "Fashion-MNIST is a dataset of Zalando's article imagesâ€”consisting of a training set of 60,000 examples\n",
    "and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from\n",
    "10 classes. One can design a convolutional neural network or Transformer to address the classification\n",
    "problem. \n",
    "\n",
    "#### Some tasks to consider:\n",
    "1. Modify some previously published architectures e.g., increase the network depth, reducing their\n",
    "parameters, etc. Explore more dilated techniques such as deformable convolution, dilated\n",
    "convolution (dilation>1) or visual prompt tuning for Transformers.\n",
    "2. Use more dilated transformation techniques such as MixUp (see the original paper and its\n",
    "PyTorch implementation here)\n",
    "3. Comparing the performance of different network architectures\n",
    "\n",
    "#### References:\n",
    "- [Deep Learning CNN for Fashion-MNIST Clothing Classification](https://machinelearningmastery.com/how-to-develop-a-cnn-from-scratch-for-fashion-mnist-clothing-classification/)\n",
    "\n",
    "#### Datasets:\n",
    "- [Dataset available in TorchVision](https://pytorch.org/vision/stable/generated/torchvision.datasets.FashionMNIST.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br> \n",
    "\n",
    "# 1. CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "! pip install torch torchvision matplotlib scikit-learn seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "from torchvision import datasets, transforms\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import seaborn as sns\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hyperparameters\n",
    "BATCH_SIZE = 64\n",
    "LEARNING_RATE = 0.001\n",
    "NUM_EPOCHS = 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define transformations for the dataset\n",
    "transform = transforms.Compose([\n",
    "   transforms.ToTensor(),  # Convert PIL images to tensors\n",
    "   transforms.Normalize((0.5,), (0.5,))  # Normalize with mean=0.5 and std=0.5\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training samples: 60000\n",
      "Number of test samples: 10000\n"
     ]
    }
   ],
   "source": [
    "# Load the training dataset\n",
    "train_dataset = datasets.FashionMNIST(\n",
    "   root='./data',  # Directory to store the dataset\n",
    "   train=True,  # Load training data\n",
    "   transform=transform,  # Apply transformations\n",
    "   download=True  # Download the dataset if not already present\n",
    ")\n",
    "\n",
    "# Load the test dataset\n",
    "test_dataset = datasets.FashionMNIST(\n",
    "   root='./data',\n",
    "   train=False,  # Load test data\n",
    "   transform=transform,\n",
    "   download=True\n",
    ")\n",
    "\n",
    "# print dataset information\n",
    "print(f\"Number of training samples: {len(train_dataset)}\")\n",
    "print(f\"Number of test samples: {len(test_dataset)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create DataLoaders for batching\n",
    "train_loader = DataLoader(dataset=train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
    "test_loader = DataLoader(dataset=test_dataset, batch_size=BATCH_SIZE, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x900 with 15 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "classes = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n",
    "               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
    "\n",
    "# Function to show images\n",
    "def show_images(images, labels, grid_size=(3, 5), figsize=(15, 9), title=None):\n",
    "\tplt.figure(figsize=figsize)\n",
    "\timages = images.cpu()  # Move to CPU if they're on GPU\n",
    "\tfor i in range(grid_size[0] * grid_size[1]):\n",
    "\t\t\n",
    "\t\tplt.subplot(grid_size[0], grid_size[1], i + 1)\n",
    "\t\tplt.imshow(images[i].squeeze(), cmap='gray')\n",
    "\t\tplt.title(classes[labels[i]])\n",
    "\t\tplt.axis('off')\n",
    "\n",
    "# Get a batch of training images\n",
    "dataiter = iter(train_loader)\n",
    "images, labels = next(dataiter)\n",
    "\n",
    "# Show a batch of images\n",
    "show_images(images[:15], labels[:15], title=\"Sample Fashion-MNIST Images\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "class StandardCNN(nn.Module):\n",
    "   def __init__(self):\n",
    "      super(StandardCNN, self).__init__()\n",
    "      self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)  # 28x28 -> 28x28\n",
    "      self.pool = nn.MaxPool2d(kernel_size=2, stride=2)                   # 28x28 -> 14x14\n",
    "      self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)  # 14x14 -> 14x14\n",
    "      self.fc1 = nn.Linear(64 * 7 * 7, 128)                              # Flattened after pool\n",
    "      self.fc2 = nn.Linear(128, 10)\n",
    "      \n",
    "   def forward(self, x):\n",
    "      x = self.pool(nn.functional.relu(self.conv1(x)))\n",
    "      x = self.pool(nn.functional.relu(self.conv2(x)))\n",
    "      x = x.view(-1, 64 * 7 * 7)\n",
    "      x = nn.functional.relu(self.fc1(x))\n",
    "      x = self.fc2(x)\n",
    "      return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DilatedCNN(nn.Module):\n",
    "   def __init__(self):\n",
    "      super(DilatedCNN, self).__init__()\n",
    "      self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)  # Standard\n",
    "      self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
    "      self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=2, dilation=2)  # Dilated (d=2)\n",
    "      self.fc1 = nn.Linear(64 * 7 * 7, 128)\n",
    "      self.fc2 = nn.Linear(128, 10)\n",
    "      \n",
    "   def forward(self, x):\n",
    "      x = self.pool(nn.functional.relu(self.conv1(x)))\n",
    "      x = self.pool(nn.functional.relu(self.conv2(x)))  # Dilated conv\n",
    "      x = x.view(-1, 64 * 7 * 7)\n",
    "      x = nn.functional.relu(self.fc1(x))\n",
    "      x = self.fc2(x)\n",
    "      return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchvision.ops import deform_conv2d\n",
    "import torch.nn.functional as F\n",
    "\n",
    "class DeformableConv2d(nn.Module):\n",
    "    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1):\n",
    "        super(DeformableConv2d, self).__init__()\n",
    "        \n",
    "        self.stride = stride\n",
    "        self.padding = padding\n",
    "        self.kernel_size = kernel_size\n",
    "        \n",
    "        # Regular convolution for learning offsets\n",
    "        self.offset_conv = nn.Conv2d(in_channels, 2*kernel_size*kernel_size, \n",
    "                                    kernel_size=kernel_size, stride=stride, \n",
    "                                    padding=padding)\n",
    "        \n",
    "        # Initialize weights for offset conv to zero\n",
    "        nn.init.constant_(self.offset_conv.weight, 0)\n",
    "        nn.init.constant_(self.offset_conv.bias, 0)\n",
    "        \n",
    "        # Main convolution\n",
    "        self.conv = nn.Conv2d(in_channels, out_channels, \n",
    "                             kernel_size=kernel_size, stride=stride, \n",
    "                             padding=padding)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # Generate offsets\n",
    "        offsets = self.offset_conv(x)\n",
    "        \n",
    "        # Apply deformable convolution\n",
    "        x = deform_conv2d(x, offsets, self.conv.weight, self.conv.bias, \n",
    "                         stride=self.stride, padding=self.padding)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DeformableCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(DeformableCNN, self).__init__()\n",
    "        \n",
    "        # First block - deformable convolution\n",
    "        self.conv1 = DeformableConv2d(1, 32)\n",
    "        self.bn1 = nn.BatchNorm2d(32)\n",
    "        \n",
    "        # Second block - deformable convolution\n",
    "        self.conv2 = DeformableConv2d(32, 64)\n",
    "        self.bn2 = nn.BatchNorm2d(64)\n",
    "        \n",
    "        # Third block - regular convolution\n",
    "        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n",
    "        self.bn3 = nn.BatchNorm2d(128)\n",
    "        \n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.dropout = nn.Dropout(0.4)\n",
    "        \n",
    "        # Classifier\n",
    "        self.fc1 = nn.Linear(128*3*3, 256)\n",
    "        self.fc2 = nn.Linear(256, 10)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.pool(F.relu(self.bn1(self.conv1(x))))\n",
    "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
    "        x = self.pool(F.relu(self.bn3(self.conv3(x))))\n",
    "        x = x.view(-1, 128*3*3)\n",
    "        x = self.dropout(x)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.fc2(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Device configuration\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "standard_model = StandardCNN().to(device)\n",
    "dilated_model = DilatedCNN().to(device)\n",
    "deformable_model = DeformableCNN().to(device)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer_standard = torch.optim.Adam(standard_model.parameters(), lr=LEARNING_RATE)\n",
    "optimizer_dilated = torch.optim.Adam(dilated_model.parameters(), lr=LEARNING_RATE)\n",
    "optimizer_deformable = torch.optim.Adam(deformable_model.parameters(), lr=LEARNING_RATE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standard CNN - Epoch [1/15], Train Loss: 0.2684, Train Acc: 90.33%, Val Loss: 0.2847, Val Acc: 89.90%\n",
      "Standard CNN - Epoch [2/15], Train Loss: 0.2264, Train Acc: 91.74%, Val Loss: 0.2530, Val Acc: 91.03%\n",
      "Standard CNN - Epoch [3/15], Train Loss: 0.1935, Train Acc: 92.86%, Val Loss: 0.2564, Val Acc: 90.83%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def train_and_validate_model(model, train_loader, test_loader, criterion, optimizer, num_epochs, model_name):\n",
    "   model.train()\n",
    "   train_losses = []\n",
    "   train_accs = []\n",
    "   val_losses = []\n",
    "   val_accs = []\n",
    "   \n",
    "   for epoch in range(num_epochs):\n",
    "      # Training phase\n",
    "      model.train()\n",
    "      running_loss = 0.0\n",
    "      correct = 0\n",
    "      total = 0\n",
    "      \n",
    "      for images, labels in train_loader:\n",
    "         images, labels = images.to(device), labels.to(device)\n",
    "         \n",
    "         optimizer.zero_grad()\n",
    "         outputs = model(images)\n",
    "         loss = criterion(outputs, labels)\n",
    "         loss.backward()\n",
    "         optimizer.step()\n",
    "         \n",
    "         running_loss += loss.item()\n",
    "         _, predicted = torch.max(outputs.data, 1)\n",
    "         total += labels.size(0)\n",
    "         correct += (predicted == labels).sum().item()\n",
    "      \n",
    "      train_loss = running_loss / len(train_loader)\n",
    "      train_acc = 100 * correct / total\n",
    "      train_losses.append(train_loss)\n",
    "      train_accs.append(train_acc)\n",
    "      \n",
    "      # Validation phase\n",
    "      model.eval()\n",
    "      val_loss = 0.0\n",
    "      correct = 0\n",
    "      total = 0\n",
    "      \n",
    "      with torch.no_grad():\n",
    "         for images, labels in test_loader:\n",
    "            images, labels = images.to(device), labels.to(device)\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            val_loss += loss.item()\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "      \n",
    "      val_loss = val_loss / len(test_loader)\n",
    "      val_acc = 100 * correct / total\n",
    "      val_losses.append(val_loss)\n",
    "      val_accs.append(val_acc)\n",
    "      \n",
    "      print(f'{model_name} - Epoch [{epoch+1}/{num_epochs}], '\n",
    "            f'Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%, '\n",
    "            f'Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%')\n",
    "   \n",
    "   return train_losses, train_accs, val_losses, val_accs\n",
    "\n",
    "# Train both models and collect metrics\n",
    "standard_train_loss, standard_train_acc, standard_val_loss, standard_val_acc = train_and_validate_model(\n",
    "   standard_model, train_loader, test_loader, criterion, optimizer_standard, NUM_EPOCHS, \"Standard CNN\")\n",
    "\n",
    "dilated_train_loss, dilated_train_acc, dilated_val_loss, dilated_val_acc = train_and_validate_model(\n",
    "   dilated_model, train_loader, test_loader, criterion, optimizer_dilated, NUM_EPOCHS, \"Dilated CNN\")\n",
    "\n",
    "deformable_train_loss, deformable_train_acc, deformable_val_loss, deformable_val_acc = train_and_validate_model(\n",
    "\tdeformable_model, train_loader, test_loader, criterion, optimizer_deformable, NUM_EPOCHS, \"Deformable CNN\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot Model Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Plotting function\n",
    "def plot_metrics(epochs, standard_metrics, dilated_metrics, standard_val, dilated_val, metric_name):\n",
    "   plt.figure(figsize=(12, 5))\n",
    "   \n",
    "   plt.subplot(1, 2, 1)\n",
    "   plt.plot(range(1, epochs+1), standard_metrics, label='standard CNN')\n",
    "   plt.plot(range(1, epochs+1), dilated_metrics, label='dilated CNN')\n",
    "   plt.xlabel('Epoch')\n",
    "   plt.ylabel(metric_name)\n",
    "   plt.title(f'Training {metric_name}')\n",
    "   plt.legend()\n",
    "   \n",
    "   plt.subplot(1, 2, 2)\n",
    "   plt.plot(range(1, epochs+1), standard_val, label='standard CNN')\n",
    "   plt.plot(range(1, epochs+1), dilated_val, label='dilated CNN')\n",
    "   plt.xlabel('Epoch')\n",
    "   plt.ylabel(metric_name)\n",
    "   plt.title(f'Validation {metric_name}')\n",
    "   plt.legend()\n",
    "   \n",
    "   plt.tight_layout()\n",
    "   plt.show()\n",
    "\n",
    "# Plot Loss curves\n",
    "plot_metrics(NUM_EPOCHS, standard_train_loss, dilated_train_loss, \n",
    "            standard_val_loss, dilated_val_loss, 'Loss')\n",
    "# Plot Accuracy curves\n",
    "plot_metrics(NUM_EPOCHS, standard_train_acc, dilated_train_acc, \n",
    "            standard_val_acc, dilated_val_acc, 'Accuracy (%)')\n",
    "\n",
    "# Plot Loss curves\n",
    "plot_metrics(NUM_EPOCHS, standard_train_loss, deformable_train_loss, \n",
    "            standard_val_loss, dilated_val_loss, 'Loss')\n",
    "# Plot Accuracy curves\n",
    "plot_metrics(NUM_EPOCHS, standard_train_acc, deformable_train_acc, \n",
    "            standard_val_acc, dilated_val_acc, 'Accuracy (%)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_confusion_matrix_enhanced(model, test_loader, model_name):\n",
    "   model.eval()\n",
    "   all_preds = []\n",
    "   all_labels = []\n",
    "   \n",
    "   with torch.no_grad():\n",
    "       for images, labels in test_loader:\n",
    "           images = images.to(device)\n",
    "           labels = labels.to(device)\n",
    "           outputs = model(images)\n",
    "           _, preds = torch.max(outputs, 1)\n",
    "           all_preds.extend(preds.cpu().numpy())\n",
    "           all_labels.extend(labels.cpu().numpy())\n",
    "   \n",
    "   # Compute confusion matrix\n",
    "   cm = confusion_matrix(all_labels, all_preds)\n",
    "   cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "   \n",
    "   # Plot\n",
    "   plt.figure(figsize=(12, 10))\n",
    "   \n",
    "   # Plot counts\n",
    "   plt.subplot(2, 1, 1)\n",
    "   sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "               xticklabels=classes, yticklabels=classes)\n",
    "   plt.title(f'Confusion Matrix (Counts) - {model_name}')\n",
    "   plt.xlabel('Predicted')\n",
    "   plt.ylabel('True')\n",
    "   \n",
    "   # Plot percentages\n",
    "   plt.subplot(2, 1, 2)\n",
    "   sns.heatmap(cm_normalized, annot=True, fmt='.2f', cmap='Greens',\n",
    "               xticklabels=classes, yticklabels=classes)\n",
    "   plt.title(f'Confusion Matrix (Normalized) - {model_name}')\n",
    "   plt.xlabel('Predicted')\n",
    "   plt.ylabel('True')\n",
    "   \n",
    "   plt.tight_layout()\n",
    "   plt.show()\n",
    "\n",
    "   print(f\"Classification Report for {model_name}:\\n\")\n",
    "   print(classification_report(all_labels, all_preds, target_names=classes))\n",
    "   \n",
    "\n",
    "# Plot enhanced confusion matrices\n",
    "plot_confusion_matrix_enhanced(standard_model, test_loader, \"Standard CNN\")\n",
    "plot_confusion_matrix_enhanced(dilated_model, test_loader, \"Dilated CNN\")\n",
    "plot_confusion_matrix_enhanced(deformable_model, test_loader, \"Deformable CNN\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
